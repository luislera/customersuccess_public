name: pva-workflow
on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: "name of the Solution in Dataverse environment"
        required: true
        default: MicaSolution
      environment_url:
        description: "http endpoint of your Dataverse environment"
        required: true
        default: "https://orgea394ded.crm.dynamics.com/"
      source_branch:
        description: "source branch"
        required: true
        default: main
      branch_to_create:
        description: "branch to create"
        required: false
        default: "init2"
      commit_message:
        description: "message to provide for the commit"
        required: true
        default: "init message"
env:
  workflow_scripts_path: .github/workflows/scripts

jobs:
  export-unpack-commit-solution:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: export-unpack-commit-solution
        id: export-unpack-commit-solution
        shell: pwsh
        env:
          # Workflows cannot be dispatched with the standard GITHUB_TOKEN, so we use a token that can
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}
        run: |
          . ${{ env.workflow_scripts_path }}/pwsh/Test-Run.ps1

          $params = @{
              githubRef = '${{ github.ref }}'
              workflow_name = 'export-unpack-commit-solution'
              solution_name = '${{ github.event.inputs.solution_name }}'
              environment_url = '${{ github.event.inputs.environment_url }}'
              source_branch = '${{ github.event.inputs.source_branch }}'
              branch_to_create = '${{ github.event.inputs.branch_to_create }}'
              commit_message = '${{ github.event.inputs.commit_message }}'
          }

          Export-Unpack-Commit @params

  sync-unmanaged-solution:
    runs-on: ubuntu-latest
    needs: export-unpack-commit-solution
    steps:
      - uses: actions/checkout@v2    
      - name: sync-unmanaged-solution
        id: sync-unmanaged-solution
        shell: pwsh
        env:
          # Workflows cannot be dispatched with the standard GITHUB_TOKEN, so we use a token that can
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}
        run: |
          . ${{ env.workflow_scripts_path }}/pwsh/Test-Run.ps1

          $params = @{
              githubRef = '${{ github.ref }}'
              workflow_name = 'sync-unmanaged-solution'
              from_branch = '${{ github.event.inputs.source_branch }}'
              to_branch = '${{ github.event.inputs.branch_to_create }}'
          }

          Sync-Unmanaged @params

  delete-and-import-unmanaged-solution:
    runs-on: ubuntu-latest
    needs: sync-unmanaged-solution
    steps:
      - uses: actions/checkout@v2    
      - name: delete-and-import-unmanaged-solution
        id: delete-and-import-unmanaged-solution
        shell: pwsh
        env:
          # Workflows cannot be dispatched with the standard GITHUB_TOKEN, so we use a token that can
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}
        run: |
          . ${{ env.workflow_scripts_path }}/pwsh/Test-Run.ps1

          $params = @{
              workflow_name = 'delete-and-import-unmanaged-solution'
              solution_name = '${{ github.event.inputs.solution_name }}'
              environment_url = '${{ github.event.inputs.environment_url }}'
              ref = '${{ github.ref }}'
          }

          Delete-Import-Unmanaged @params

  create-pr-with-solution:
    runs-on: ubuntu-latest
    needs: delete-and-import-unmanaged-solution
    steps:
      - name: create-pr-with-solution
        uses: actions/github-script@v5
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '[Example] Init branch',
              owner,
              repo,
              head: '${{ github.ref_name }}',
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['automated pr']
            });